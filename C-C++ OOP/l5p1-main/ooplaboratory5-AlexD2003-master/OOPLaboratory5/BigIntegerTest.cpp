#include "BigIntegerTest.h"

#if ENABLE_TESTS > 0
#include <csetjmp>
#include <csignal>
#include <cstdbool>
#include <cstdint>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <string>

#include "BigInteger.h"


#define FIRST_TEST Sign_test
#define MAXSCORE 36
#define CHARITY 10


using namespace std;

static uint8_t testsPassed;
static volatile sig_atomic_t testStatus;
static uint8_t disable_exit_handler;
jmp_buf test_crash;

enum Test_e {
    Sign_test = 0,
    Negate_test,
    Add_test,
    Increment_test,
    AddAssign_test,
    Subtract_test,
    SubAssign_test,
    Comparison_test,
    Copy_test,
    NUM_TESTS,
};

string testName(int test) {
    if (test == Sign_test)
        return "Sign_test";
    if (test == Negate_test)
        return "Negate_test";
    if (test == Add_test)
        return "Add_test";
    if (test == Increment_test)
        return "Increment_test";
    if (test == AddAssign_test)
        return "AddAssign_test";
    if (test == Subtract_test)
        return "Subtract_test";
    if (test == SubAssign_test)
        return "SubAssign_test";
    if (test == Comparison_test)
        return "Comparison_test";
    if (test == Copy_test)
        return "Copy_test";
    if (test == NUM_TESTS)
        return "NUM_TESTS";

    return "";
}

uint8_t runTest(int test) {

    BigInteger A;
    BigInteger B;
    BigInteger C;
    BigInteger D;
    BigInteger E;


    switch (test) {
    case Sign_test: {
        if (A.sgn() != 0)
            return 1;
        B = BigInteger("278950284752");
        C = BigInteger("+7764853730760");
        D = BigInteger("-1930294385068");
        E = BigInteger("0000000000000000000");

        if (B.sgn() != 1)
            return 2;

        if (C.sgn() != 1)
            return 3;
        
        if (D.sgn() != -1)
            return 4;
        
        if (E.sgn() != 0)
            return 5;
        return 0;
    }
    
    case Negate_test: {
        A = BigInteger("+8943583792006");
        A.negate();
        if (A.sgn() != -1)
            return 1;

        A.negate();
        if (A.sgn() != 1)
            return 2;

        B = BigInteger();
        B.negate();
        if (B.sgn() != 0)
            return 3;

        return 0;
    }

    case Add_test: {
        A = BigInteger("+772222000088888811");
        B = BigInteger("+227777000011111188");
        D = BigInteger("+999999000099999999");
        C = A + B;

        if (!(C == D))
            return 1;

        B = BigInteger("-772222000088888811");
        C = A + B;
        
        if (C.sgn() != 0)
            return 2;

        B = BigInteger("-672222000088888811");
        D = BigInteger("100000000000000000");

        C = A + B;

        if (C.sgn() != 1)
            return 31;

        if (!(C == D))
            return 32;

        B = BigInteger("-872222000088888811");
        D = BigInteger("-100000000000000000");

        C = A + B;

        if (C.sgn() != -1)
            return 41;


        if (!(C == D))
            return 42;

        A = BigInteger("-772222000088888811");
        B = BigInteger("-227777000011111188");
        D = BigInteger("-999999000099999999");
        C = A + B;

        if (C.sgn() != -1)
            return 51;

        if (!(C == D))
            return 52;

        A = BigInteger("2743285932583205840683095832085023809483069840938609328028609829604839068340968092202592895783475983467893476394206823746023478643728673482907634786324760");
        B = BigInteger("2403295306849680532346725835834925803285038650486094820582305340683098509384396894860938603860342930295039503950265375938579385309258328502856309583902850");

        D = BigInteger("5146581239432886373029821667919949612768108491424704148610915170287937577725364987063531499643818913762932980344472199684602863952987001985763944370227610");
        C = A + B;
        
        if (C.sgn() != 1)
            return 61;

        if (!(C == D))
            return 62;

        A = BigInteger("-2743285932583205840683095832085023809483069840938609328028609829604839068340968092202592895783475983467893476394206823746023478643728673482907634786324760");
        B = BigInteger("2403295306849680532346725835834925803285038650486094820582305340683098509384396894860938603860342930295039503950265375938579385309258328502856309583902850");
        
        D = BigInteger("-339990625733525308336369996250098006198031190452514507446304488921740558956571197341654291923133053172853972443941447807444093334470344980051325202421910");
        C = A + B;


        if (C.sgn() != -1)
            return 71;

        if (!(C == D))
            return 72;

        A = BigInteger("3729150928554702442414149175620649235932141254958609994754881086870354096432680978993974017043517393400280356415203677444742476780562224472222470125604137189551277980367362171212444067225678772359177116881449546540702038965861964164395654700469546344046303360514086169267280531990390968431018269967602725536356259464264923063986493485397252686907417460537701591125888290685214292533968150707980477146032778794315480469863328540030290972792502783859859312394797018261343321636183470041086019167175518395121825556034255391119033649639704413255260359955129701152148110535199153752017052945142999636863598376486516579220721168164096768678790800097521542472312143230487291626846272595887082025564868641148258377596132372685002001938955882516194044765800040395427510589581300192931326584649602225549954316147167407238954252097008977547037150046068855444291240639911613631879542764207788151538410067602495753941387332622510027115559538659227916526367307536124261995940902191801615884809192434029710130888164");
        B = BigInteger("-3189566462487811091227227147402491544571291393281176312010139755183236974267609213743829302511376449515674273975676687352572518277600691452752596601664144527083407266659844566250423081394323224205730559497731244908570258144382434993615527715279245458575748425704011410298353791455241119422656334302248789271390496295471505776230634488226949885438099736336409507725258176249154397617753804468121862768108593416975113077179372125187496569012066512508747121545329655991775552998807087585823693748186205718827916166245131445981248415414272479358931252807709759245072390948637992472622863358323632418033419204070741782370274963765779284394139044160259284632154032117532364506639020707270283728265349082169279155655370345259801545194868771871546876263377836263396178582214952131999431684844172624978653962647169147456332619657924544736921766535731192788585927985444965822955936037220695260423130291458872058646826899875092739993949986439558415554520788443434205350057161718519501608309051089633921255113060");
        D = BigInteger("6918717391042513533641376323023140780503432648239786306765020842053591070700290192737803319554893842915954630390880364797314995058162915924975066727268281716634685247027206737462867148620001996564907676379180791449272297110244399158011182415748791802622051786218097579565634323445632087853674604269851514807746755759736428840217127973624202572345517196874111098851146466934368690151721955176102339914141372211290593547042700665217787541804569296368606433940126674253118874634990557626909712915361724113949741722279386837100282065053976892614191612762839460397220501483837146224639916303466632054897017580557258361590996131929876053072929844257780827104466175348019656133485293303157365753830217723317537533251502717944803547133824654387740921029177876658823689171796252324930758269493774850528608278794336554695286871754933522283958916581800048232877168625356579454835478801428483411961540359061367812588214232497602767109509525098786332080888095979558467345998063910321117493118243523663631386001224");
        C = A - B;

        if (!(C == D))
            return 8;

        A = BigInteger("-3729150928554702442414149175620649235932141254958609994754881086870354096432680978993974017043517393400280356415203677444742476780562224472222470125604137189551277980367362171212444067225678772359177116881449546540702038965861964164395654700469546344046303360514086169267280531990390968431018269967602725536356259464264923063986493485397252686907417460537701591125888290685214292533968150707980477146032778794315480469863328540030290972792502783859859312394797018261343321636183470041086019167175518395121825556034255391119033649639704413255260359955129701152148110535199153752017052945142999636863598376486516579220721168164096768678790800097521542472312143230487291626846272595887082025564868641148258377596132372685002001938955882516194044765800040395427510589581300192931326584649602225549954316147167407238954252097008977547037150046068855444291240639911613631879542764207788151538410067602495753941387332622510027115559538659227916526367307536124261995940902191801615884809192434029710130888164");
        B = BigInteger("3189566462487811091227227147402491544571291393281176312010139755183236974267609213743829302511376449515674273975676687352572518277600691452752596601664144527083407266659844566250423081394323224205730559497731244908570258144382434993615527715279245458575748425704011410298353791455241119422656334302248789271390496295471505776230634488226949885438099736336409507725258176249154397617753804468121862768108593416975113077179372125187496569012066512508747121545329655991775552998807087585823693748186205718827916166245131445981248415414272479358931252807709759245072390948637992472622863358323632418033419204070741782370274963765779284394139044160259284632154032117532364506639020707270283728265349082169279155655370345259801545194868771871546876263377836263396178582214952131999431684844172624978653962647169147456332619657924544736921766535731192788585927985444965822955936037220695260423130291458872058646826899875092739993949986439558415554520788443434205350057161718519501608309051089633921255113060");
        D = BigInteger("-6918717391042513533641376323023140780503432648239786306765020842053591070700290192737803319554893842915954630390880364797314995058162915924975066727268281716634685247027206737462867148620001996564907676379180791449272297110244399158011182415748791802622051786218097579565634323445632087853674604269851514807746755759736428840217127973624202572345517196874111098851146466934368690151721955176102339914141372211290593547042700665217787541804569296368606433940126674253118874634990557626909712915361724113949741722279386837100282065053976892614191612762839460397220501483837146224639916303466632054897017580557258361590996131929876053072929844257780827104466175348019656133485293303157365753830217723317537533251502717944803547133824654387740921029177876658823689171796252324930758269493774850528608278794336554695286871754933522283958916581800048232877168625356579454835478801428483411961540359061367812588214232497602767109509525098786332080888095979558467345998063910321117493118243523663631386001224");
        C = A - B;
        if (!(C == D))
            return 9;

        return 0;
    }

    case AddAssign_test: {
        A = BigInteger("+772222000088888811");
        B = BigInteger("+227777000011111188");
        D = BigInteger("+999999000099999999");
        A += B;

        if (!(A == D))
            return 1;

        A = BigInteger("+772222000088888811");
        B = BigInteger("-772222000088888811");
        A += B;

        if (A.sgn() != 0)
            return 2;

        A = BigInteger("+772222000088888811");
        B = BigInteger("-672222000088888811");
        D = BigInteger("100000000000000000");

        A += B;

        if (A.sgn() != 1)
            return 31;

        if (!(A == D))
            return 32;


        A = BigInteger("+772222000088888811");
        B = BigInteger("-872222000088888811");
        D = BigInteger("-100000000000000000");

        A += B;

        if (A.sgn() != -1)
            return 41;


        if (!(A == D))
            return 42;

       
        A = BigInteger("-772222000088888811");
        B = BigInteger("-227777000011111188");
        D = BigInteger("-999999000099999999");
        A += B;

        if (A.sgn() != -1)
            return 51;

        if (!(A == D))
            return 52;

        A = BigInteger("2743285932583205840683095832085023809483069840938609328028609829604839068340968092202592895783475983467893476394206823746023478643728673482907634786324760");
        B = BigInteger("2403295306849680532346725835834925803285038650486094820582305340683098509384396894860938603860342930295039503950265375938579385309258328502856309583902850");
        D = BigInteger("5146581239432886373029821667919949612768108491424704148610915170287937577725364987063531499643818913762932980344472199684602863952987001985763944370227610");
        A += B;

        if (A.sgn() != 1)
            return 61;

        if (!(A == D))
            return 62;


        return 0;
    }

    case Subtract_test: {


        A = BigInteger("+772222000088888811");
        B = BigInteger("772222000088888811");

        C = A - B;
        if (C.sgn() != 0)
            return 1;

 
        A = BigInteger("+772222000088888811");
        B = BigInteger("672222000088888811");
        D = BigInteger("-100000000000000000");
        C = B - A;
        

        if (C.sgn() != -1)
            return 21;
        if (!(C == D))
            return 22;

        B.negate();
        D = BigInteger("1444444000177777622");
        C = A - B;
        if (C.sgn() != 1)
            return 31;
        if (!(C == D))
            return 32;


        D.negate();
        C = B - A;
        if (C.sgn() != -1)
            return 41;
        if (!(C == D))
            return 42;

        return 0;
    }

    case SubAssign_test: {
        A = BigInteger("-111122223333");
        B = BigInteger("-111122223333");


        A -= B;
        if (A.sgn() != 0)
            return 1;


        A = BigInteger("-111122223333");
        B = BigInteger("-112122223333");
        D = BigInteger("1000000000");
        A -= B;
        if (A.sgn() != 1)
            return 21;
        if (!(A == D))
            return 22;

        return 0;
    }

    case Copy_test: {
        BigInteger a = BigInteger("3842985739867398638390634069352");
        // copy constructor
        BigInteger b = a;

        if (!(a == b))
            return 1;

        // assignmnet operator
        BigInteger c;
        c = a;
        if (!(a == c))
            return 2;

        b += BigInteger("10");
        if (a == b)
            return 3;

        c += BigInteger("200");
        if (a == c)
            return 4;

        BigInteger& d = a;
        d = a;
        if (!(d == a))
            return 5;
        

        return 0;
    }

    case Comparison_test: {
        A = BigInteger("111122223333");
        B = BigInteger("911122223333");
        C = BigInteger("112122223333");
        D = BigInteger("110122223333");

        if (!(A <= B))
            return 1;

        if (A >= C)
            return 2;

        if (A <= D)
            return 3;

        if (!(A < C))
            return 4;

        if (!(A > D))
            return 5;



        A = BigInteger("88888888888888887777777777777777777777777777777777744444444444444444444111111111111111111");
        B = BigInteger("+88888888888888887777777777777777777777777777777777744444444444444444444111111111111111111");


        if (!(A == B))
            return 11;

        if ((A == C))
            return 2;

        return 0;
    }

    case Increment_test: {
        BigInteger A("-1");
        A++;
        if (A.sgn() != 0)
            return 1;

        A = BigInteger("-1");
        ++A;
        if (A.sgn() != 0)
            return 2;


        A = BigInteger("-1");
        BigInteger B = A++;
        
        if (B.sgn() != -1)
            return 31;

        BigInteger D("-1");
        if (!(B == D))
            return 32;

        A = BigInteger("-1");
        B = ++A;
        if (B.sgn() != 0)
            return 3;


        A = BigInteger("100");
        B = A++;
        D = BigInteger("101");
        C = BigInteger("100");
        if (A == B)
            return 41;

        if (A.sgn() != 1)
            return 42;

        if (!(A == D))
            return 43;

        if (B.sgn() != 1)
            return 44;

        if (!(B == C))
            return 45;

        A = BigInteger("100");
        B = ++A;
        if (A.sgn() != 1)
            return 51;

        if (!(A == D))
            return 52;

        if (B.sgn() != 1)
            return 53;

        if (!(B == D))
            return 54;


        A = BigInteger("-100");
        B = A++;
        C = BigInteger("-100");
        D = BigInteger("-99");
        if (A == B)
            return 61;

        if (A.sgn() != -1)
            return 62;

        if (!(A == D))
            return 63;

        if (B.sgn() != -1)
            return 64;

        if (!(B == C))
            return 65;


        A = BigInteger("-100");
        B = ++A;
        D = BigInteger("-99");
        if (!(A == B))
            return 71;

        if (A.sgn() != -1)
            return 72;

        if (!(A == D))
            return 73;

        if (B.sgn() != -1)
            return 74;

        if (!(B == D))
            return 75;


        return 0;
    }
    }
    
    return 255;
}

void segfault_handler(int signal) { // everyone knows what this is
    testStatus = 255;
    longjmp(test_crash, 1);
}

void exit_attempt_handler(void) { // only I decide when you are done
    if (disable_exit_handler)
        return; // allow this to be disabled
    testStatus = 255;
    longjmp(test_crash, 2);
}


void run_bigint_tests(bool verbose)
{

    testsPassed = 0;
    disable_exit_handler = 0;
    atexit(exit_attempt_handler);
    signal(SIGSEGV, segfault_handler);

    for (uint8_t i = FIRST_TEST; i < NUM_TESTS; i++) {
        
        uint8_t fail_type;
        try {

            testStatus = runTest(i);
            fail_type = setjmp(test_crash);
        }
        catch (...) {
            testStatus = 255;
            fail_type = 3;
        }
        if (verbose) { // it's verbose mode
            cout << "Test " + testName(i) + ": "
                << (testStatus == 0 ? GREEN "PASSED" NC : RED "FAILED" NC);
            if (testStatus == 255) {
                cout << ": due to a " RED
                    << (fail_type == 1
                        ? "segfault"
                        : (fail_type == 2
                            ? "program exit"
                            : (fail_type == 3 ? "exception being thrown"
                                : "program interruption")))
                    << NC << endl;
                cout << "\nWARNING: Program will now stop running tests\n" << endl;
                break;
            }
            else if (testStatus != 0) {
                cout << ": test " CYAN << testStatus << NC << endl;
            }
            else {
                cout << endl;
            }
        }
        if (testStatus == 0) {
            testsPassed++;
        }
    }

    disable_exit_handler = 1;

    uint8_t totalScore = (MAXSCORE - NUM_TESTS * 3) + testsPassed * 3;
    if (testsPassed == 0)
        totalScore = 0;

    if (verbose && testStatus != 255)
        cout << "\nYou passed " << unsigned(testsPassed) << " out of " << NUM_TESTS<< " tests" << endl;
    else if (testStatus == 255) {
        totalScore = CHARITY; // charity points
        if (verbose)
            cout << RED "Receiving charity points because your program crashes" NC<< endl<<endl;
    }
    
}
#endif